include "list.pixi"

BOX_BRD = 1
BOX_PAD = 4

fn UI() {
    $ui = new()

    $ui.elements = -1

    // methods

    $ui.draw = {
        fn draw_list($elements) {
            $el = $elements.Head
            if $elements.Tail > -1 {
                draw_list($elements.Tail)
            }
            $gfx = clone($el)
            pixi($gfx, $el.x, $el.y)
            remove($gfx)
        }

        $ui = $1
        draw_list($ui.elements)
    }

    $ui.evt_dispatch = {
        $ui = $1
        $evt = $2

        $elements = $ui.elements
        while $elements.Head > 0 {
            $el = $elements.Head
            $elements = $elements.Tail

            $x0 = EVT[EVT_X]
            $y0 = EVT[EVT_Y]

            if $x0 >= $el.x - $el.parent.x - $el.w / 2
            && $x0 <= $el.x - $el.parent.x + $el.w / 2
            && $y0 >= $el.y - $el.parent.y - $el.h / 2
            && $y0 <= $el.y - $el.parent.y + $el.h / 2 {

                $dx = -($el.x - $el.parent.x - $el.w / 2 - $x0) / $el.w
                $dy = -($el.y - $el.parent.y - $el.h / 2 - $y0) / $el.h

                get_prop($el, $evt)($el, $dx, $dy)
                $el.set($el)

            }
        }
    }

    // elements

    $ui.Screen = {
        $ui = $1
        $el = get_screen()
        $ui.screen = $el

        $w = get_xsize($el)
        $h = get_ysize($el)

        $el.x = 0
        $el.y = 0
        $el.w = $w
        $el.h = $h
        $el.color = #000000

        ret ($el)
    }

    $ui._box = {
        $parent = $1
        $x = $2
        $y = $3
        $w = $4
        $h = $5
        $color = $6

        $el = new($w, $h)
        clean($el, $color)
        op_cn(OP_COPY, $el, $el.parent.color, BOX_BRD, BOX_BRD, $w - 2 * BOX_BRD, $h - 2 * BOX_BRD)

        $el.x = $x + ($w - $parent.w) / 2 + $parent.x
        $el.y = $y + ($h - $parent.h) / 2 + $parent.y
        $el.w = $w
        $el.h = $h
        $el.parent = $parent
        $el.color = $color

        $el.set = {}
        $el.evt_click = {}
        $el.evt_release = {}
        $el.evt_drag = {}

        ret ($el)
    }

    $ui.Canvas = {
        $ui = $1
        $el = $ui._box($2, $3, $4, $5, $6, $7)
        $ui.elements = _($el, $ui.elements)

        ret ($el)
    }

    $ui.Push = {
        $ui = $1
        $el = $ui._box($2, $3, $4, $5, $6, $7)
        $ui.elements = _($el, $ui.elements)

        $el.val = 0

        $el.evt_click = {
            $1.val = 1
        }
        $el.evt_release = {
            $1.val = 0
        }

        $el.set = {
            $el = $1

            if $el.val > 0 {
                op_cn(OP_COPY, $el, $el.color, BOX_PAD, BOX_PAD, $el.w - 2 * BOX_PAD, $el.h - 2 * BOX_PAD)
            } else {
                op_cn(OP_COPY, $el, $el.parent.color, BOX_PAD, BOX_PAD, $el.w - 2 * BOX_PAD, $el.h - 2 * BOX_PAD)
            }
        }

        $el.set($el)
        ret ($el)
    }

    $ui.Toggle = {
        $ui = $1
        $el = $ui._box($2, $3, $4, $5, $6, $7)
        $ui.elements = _($el, $ui.elements)

        $el.val = 0

        $el.evt_click = {
            $1.val = 1 - $1.val
        }

        $el.set = {
            $el = $1

            if $el.val > 0 {
                op_cn(OP_COPY, $el, $el.color, BOX_PAD, BOX_PAD, $el.w - 2 * BOX_PAD, $el.h - 2 * BOX_PAD)
            } else {
                op_cn(OP_COPY, $el, $el.parent.color, BOX_PAD, BOX_PAD, $el.w - 2 * BOX_PAD, $el.h - 2 * BOX_PAD)
            }
        }

        $el.set($el)
        ret ($el)
    }

    $ui.VSlider = {
        $ui = $1
        $el = $ui._box($2, $3, $4, $5, $6, $7)
        $ui.elements = _($el, $ui.elements)

        $el.val = 0

        $el.evt_click = {
            $el = $1
            $dx = $2
            $dy = $3
            $el.val = 1 - $dy
        }

        $el.evt_drag = {
            $1.evt_click($1, $2, $3)
        }

        $el.set = {
            $el = $1
            $dy = 1 - $el.val
            op_cn(OP_COPY, $el, $el.color, BOX_PAD, $dy * $el.h + BOX_PAD, $el.w - 2 * BOX_PAD, $el.h - $dy * $el.h - 2 * BOX_PAD)
            op_cn(OP_COPY, $el, $el.parent.color, BOX_PAD, BOX_PAD, $el.w - 2 * BOX_PAD, $dy * $el.h - 2 * BOX_PAD)
        }

        $el.set($el)
        ret ($el)
    }

    $ui.HSlider = {
        $ui = $1
        $el = $ui._box($2, $3, $4, $5, $6, $7)
        $ui.elements = _($el, $ui.elements)

        $el.val = 0

        $el.evt_click = {
            $el = $1
            $dx = $2
            $dy = $3
            $el.val = $dx
        }

        $el.evt_drag = {
            $1.evt_click($1, $2, $3)
        }

        $el.set = {
            $el = $1

            $dx = $el.val
            op_cn(OP_COPY, $el, $el.parent.color, $dx * $el.w + BOX_PAD, BOX_PAD, $el.w - $dx * $el.w - 2 * BOX_PAD, $el.h - 2 * BOX_PAD)
            op_cn(OP_COPY, $el, $el.color, BOX_PAD, BOX_PAD, $dx * $el.w - 2 * BOX_PAD, $el.h - 2 * BOX_PAD)
        }

        $el.set($el)
        ret ($el)
    }

    $ui.Pad = {
        $ui = $1
        $el = $ui._box($2, $3, $4, $5, $6, $7)
        $ui.elements = _($el, $ui.elements)

        $el.val_x = 0.5
        $el.val_y = 0.5

        $el.evt_click = {
            $el = $1
            $dx = $2
            $dy = $3

            $el.val_x = $dx
            $el.val_y = 1 - $dy
        }

        $el.evt_drag = {
            $1.evt_click($1, $2, $3)
        }

        $el.set = {
            $el = $1

            $dx = $el.val_x
            $dy = 1 - $el.val_y

            op_cn(OP_COPY, $el, $el.parent.color, BOX_BRD, BOX_BRD, $el.w - 2 * BOX_BRD, $el.h - 2 * BOX_BRD)
            op_cn(OP_COPY, $el, $el.color, $dx * $el.w - 4 * BOX_BRD, $dy * $el.h - 4 * BOX_BRD, 9 * BOX_BRD, 9 * BOX_BRD)
            op_cn(OP_COPY, $el, $el.color, $dx * $el.w, 0, BOX_BRD, $el.h)
            op_cn(OP_COPY, $el, $el.color, 0, $dy * $el.h, $el.w, BOX_BRD)
        }

        $el.set($el)
        ret ($el)
    }


    ret ($ui)
}


