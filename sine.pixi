SRATE = 44100
MAXINT = 127
MININT = -128
TICK = 0

fn _($el, $list) {
    $l = new()
    $l.Tail = $list
    $l.Head = $el
    ret ($l)
}

fn out($sig) {
    fn audio_callback(
        $stream,
        $sig,
        $channels,
        $frames,
        $output_time_in_system_ticks,
        $in_channels,
        $latency_in_frames )
    {
        $sig.gen($sig, $channels, $frames)
        copy(buf, $channels[0])
        TICK + $frames
        ret( 1 )
    }

    set_audio_callback( audio_callback, $sig, SRATE, INT8, 1, AUDIO_FLAG_INTERP2)
}

fn shut() {
    set_audio_callback( -1 )
}



fn osc_sin($freq, $amp) {

    $this = new()

    $this.phase = 0
    $this.freq = $freq
    $this.amp = $amp

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        $p = 2 * M_PI * $this.phase / SRATE
        $d = 2 * M_PI * $this.freq / SRATE

        generator(OP_SIN8, $channels[0], $p, $this.amp * MAXINT, $d, 0)

        $this.phase + $this.freq * $frames

        if $this.phase > SRATE {
            $this.phase % SRATE
        } 
    }

    ret ($this)
}

fn osc_sqr($freq, $amp) {

    $this = new()

    $this.phase = 0
    $this.freq = $freq
    $this.amp = $amp

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        $p = 2 * M_PI * $this.phase / SRATE
        $d = 2 * M_PI * $this.freq / SRATE

        generator(OP_SIN8, $channels[0], $p, MAXINT, $d, 0)
        op_cn(OP_GREATER, $channels[0], 0)
        op_cn(OP_MUL, $channels[0], 2 * MAXINT * $this.amp)
        op_cn(OP_ADD, $channels[0], -MAXINT * $this.amp)

        $this.phase + $this.freq * $frames

        if $this.phase > SRATE {
            $this.phase % SRATE
        } 
    }

    ret ($this)
}

fn osc_saw($freq, $amp) {

    $this = new()

    $this.phase = 0
    $this.freq = $freq
    $this.amp = $amp

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        $p = 2 * M_PI * $this.phase / SRATE
        $d = 2 * M_PI * $this.freq / SRATE

        generator(OP_SIN8, $channels[0], $p, MAXINT, $d, 0)

        op_cn(OP_EQUAL, $channels[0], 0)
        op_cn(OP_SUB, $channels[0], 1)
        op_cn(OP_H_INTEGRAL, $channels[0])

        op_cn(OP_MUL, $channels[0], 2 * MAXINT * $this.amp)
        op_cn(OP_ADD, $channels[0], MAXINT * $this.amp)

        $this.phase + $this.freq * $frames

        if $this.phase > SRATE {
            $this.phase % SRATE
        } 
    }

    ret ($this)
}

fn osc_noise($amp) {
    
    $this = new()
    $this.amp = $amp

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        generator(OP_RAND, $channels[0], 0, $this.amp * MAXINT)
    }

    ret ($this)

}

fn filter($freq, $q, $type) {
    $this = new()

    $this.type = $type
    $this.freq = $freq
    $this.q = $q

    if ($q > 100) {
        $this._selfosc = 1
    } else {
        $this._selfosc = 0
    }

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2

        $this._signal = $sig
    }

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        if ($this._selfosc) {
            $q = 0.001
        } else {
            $q = sqrt(1 - atan(sqrt($this.q)) * 2 / M_PI)
        }
        $scale = sqrt($q)

        $f = $this.freq / SRATE * 2

        $ch = new(1, 1)
        $ch[0] = new($frames, 1, INT8)
        $this._signal.gen($this._signal, $ch, $frames)

        $lo = new($frames, 1, INT8)
        $hi = new($frames, 1, INT8)
        $band = new($frames, 1, INT8)
        $notch = new($frames, 1, INT8)

        $i = 0 while $i < $frames {
            $in0 = $ch[0][$i] / MAXINT
            $j = 0 while $j < 2 {
                $lo0 = $lo0 + $f * $band0
                $hi0 = ($scale * $in0 - $lo0 - $q * $band0)
                $band0 = ($f * $hi0 + $band0)
                $notch0 = $hi0 + $lo0

                $j + 1
            }

            $lo[$i] = floor($lo0 * MAXINT)
            $hi[$i] = floor($hi0 * MAXINT)
            $band[$i] = floor($band0 * MAXINT)
            $notch[$i] = floor($notch0 * MAXINT)

            $i + 1
        }

        if $this.type == 0 {
            copy($channels[0], $lo)
        }
        if $this.type == 1 {
            copy($channels[0], $hi)
        }
        if $this.type == 2 {
            copy($channels[0], $band)
        }
        if $this.type == 3 {
            copy($channels[0], $notch)
        }
    }

    ret ($this)
}

fn ar($at, $av, $rt) {
    
} 

/* TODO:
    - Именовать узлы для доступа
*/
fn mix() {
    $this = new()
    $this._signals = -1
    $this._counter = 0

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this._counter + 1
        $this._signals = _($sig, $this._signals)
    }

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        clean($channels[0], 0)

        $ch = new(1, 1)
        $ch[0] = new($frames, 1, INT8)

        $signals = $this._signals
        $i = 0 while $i < $this._counter {
            $i + 1
            $sig = $signals.Head
            $signals = $signals.Tail

            $sig.gen($sig, $ch, $frames)
            
            op_cc(OP_SADD, $channels[0], $ch[0], $frames)
        }
    }

    ret ($this)
}

fn j($proc, $sig) {
    $proc.join($proc, $sig)
}

$o1 = osc_sqr(220, 0.1)
$o2 = osc_sqr(330, 0.1)
$o3 = osc_sqr(293, 0.1)
$mix = mix()

j($mix, $o1)
j($mix, $o2)
j($mix, $o3)

$hz = 110

$f = filter($hz, 100, 0)
j($f, $mix)

out($f)

buf = new(2048, 1, INT8)
clean(buf)

$d = 1
while (1)
{    
    if TICK > SRATE / 4 {
        TICK - SRATE / 4
        $hz * pow(2, $d / 12)

        if $hz > 880 * 4 {
            $d = -1
        } 

        if ($hz < 110) {
            $d = 1
        }

        $f.freq = $hz
    }

    clear()
    
    $x = 0 while ($x < 2048) {

        $r = buf[$x] + MAXINT 
        $fi = M_PI * $x / 1024
        
    	dot($r * sin($fi), $r * cos($fi), 0xFFE0E0)
	    $x + 1
    }
    
    while( get_event() ) { if EVT[ EVT_TYPE ] == EVT_QUIT { halt } }
    
    frame()
}



