SRATE = 44100

fn _($el, $list) {
    $l = new()
    $l.Tail = $list
    $l.Head = $el
    ret ($l)
}

fn out($sig) {
    fn audio_callback(
        $stream, 
        $sig, 
        $channels, 
        $frames, 
        $output_time_in_system_ticks, 
        $in_channels, 
        $latency_in_frames )
    {
        $sig.gen($sig, $channels, $frames)
        ret( 1 )
    }

    set_audio_callback( audio_callback, $sig, SRATE, FLOAT32, 1, AUDIO_FLAG_INTERP2)
}

fn osc_saw($freq, $amp) {
    $this = new()
    
    $this._phase = 0
    $this._freq = $freq
    $this._amp = 1

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        $buf = new($frames, 1, FLOAT32)
        $int = new($frames, 1, FLOAT32)
        clean($buf, $this._freq / SRATE)

        op_cn(OP_H_INTEGRAL, $buf)
        op_cn(OP_ADD, $buf, $this._phase * $this._freq / SRATE)
        copy($int, $buf)

        op_cn(OP_OR, $int, 0)
        op_cc(OP_SUB, $buf, $int)
        op_cn(OP_SUB, $buf, 0.5 + $this._freq / SRATE)        

        copy($channels[0], $buf)
        printf("!!! %f\n", $channels[0][10])
        $this._phase + $frames

        remove($int)         
    }
            
    ret ($this)
}

fn filter($freq, $q) {
    $this = new()

    $this._freq = $freq
    $this._q = $q
    $this._type = 0
    $this._filter = new_filter()
            
    $omega = 2 * M_PI * $this._freq / SRATE
    $tsin = sin( $omega )
    $tcos = cos( $omega )
    $alpha = $tsin / ( 2 * $this._q )

    if $this._type == 0 {
        //Low-pass:
        $b0 = ( 1 - $tcos ) / 2
        $b1 = 1 - $tcos
        $b2 = ( 1 - $tcos ) / 2
        $a0 = 1 + $alpha
        $a1 = -2 * $tcos
        $a2 = 1 - $alpha
    }

    if $this._type == 1 {
        //High-pass
        $b0 = ( 1 + $tcos ) / 2
        $b1 = -( 1 + $tcos )
        $b2 = ( 1 + $tcos ) / 2
        $a0 = 1 + $alpha
        $a1 = -2 * $tcos
        $a2 = 1 - $alpha
    }

    if $this._type == 2 {
        //Band-pass:
        $b0 = $alpha
            $b1 = 0
        $b2 = -$alpha
        $a0 = 1 + $alpha
        $a1 = -2 * $tcos
        $a2 = 1 - $alpha
    }

    if $this._type == 3 {
        //Notch:
        $b0 = 1
        $b1 = -2 * $tcos
        $b2 = 1
        $a0 = 1 + $alpha
        $a1 = -2 * $tcos
        $a2 = 1 - $alpha
    }

    if $this._type == 4 {
        //All-pass:
        $b0 = 1 - $alpha
        $b1 = -2 * $tcos
        $b2 = 1 + $alpha
        $a0 = 1 + $alpha
        $a1 = -2 * $tcos
        $a2 = 1 - $alpha
    }

    $ff = new(3, 1, FLOAT32) //feedforward filter coefficients
    $fb = new(2, 1, FLOAT32) //feedback filter coefficients
    $ff[0] = $b0 / $a0
    $ff[1] = $b1 / $a0
    $ff[2] = $b2 / $a0
    $fb[0] = -$a1 / $a0
    $fb[1] = -$a2 / $a0

    init_filter($this._filter, $ff, $fb)

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2

        $this._signal = $sig
    }

    $this.gen = { // $this, $channels, $frames        
        $this = $1
        $channels = $2
        $frames = $3

        $ch = new(1, 1, FLOAT32)        
        $ch[0] = new($frames, 1, FLOAT32)
           
        $this._signal.gen($this._signal, $ch, $frames)

	    apply_filter($this._filter, $channels[0], $ch, 0, 0, $frames)
    }
    
    ret ($this)

}

/* TODO: 
    - Именовать узлы для доступа
*/
fn mix() {
    $this = new()
    $this.signals = 0
    $this.counter = 0
    
    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this.counter + 1        
        $this.signals = _($sig, $this.signals)
    }

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        clean($channels[0])
        
        $ch = new(1,1, FLOAT32)
        $ch[0] = new($frames, 1, FLOAT32)

        $signals = $this.signals
        $i = 0 while $i < $this.counter {
            $i + 1
            $sig = $signals.Head
            $signals = $signals.Tail

            $sig.gen($sig, $ch, $frames)
            op_cc(OP_ADD, $channels[0], $ch[0], $frames)
        }
    }

    ret ($this)
}

fn join($proc, $sig) {
    $proc.join($proc, $sig)
}

$osc1 = osc_saw(440, 1)
$osc2 = osc_saw(660, 1)
$osc3 = osc_saw(550, 1)
$mix = mix()
join($mix, $osc1)
join($mix, $osc2)
join($mix, $osc3)

$flt = filter(440, 4)

join($flt, $mix)

out($flt)

while( 1 )
{
    while( get_event() ) { if EVT[ EVT_TYPE ] == EVT_QUIT { halt } }
}




