fn bq_lp($freq, $r) {
    $bq = biquad($freq, $r, 0)
    ret ($bq.init($bq))
}

fn bq_hp($freq, $r) {
    $bq = biquad($freq, $r, 1)
    ret ($bq.init($bq))
}

fn bq_bp($freq, $r) {
    $bq = biquad($freq, $r, 2)
    ret ($bq.init($bq))
}

fn bq_notch($freq, $r) {
    $bq = biquad($freq, $r, 3)
    ret ($bq.init($bq))
}

fn biquad($freq, $r, $type) {
    $this = new()

    $this.Type = $type
    $this.Freq = $freq

    $this._alpha = (1 - $r * $r) / 2

    $this._a = new(3, 1, FLOAT32) //feedforward filter coefficients
    $this._b = new(2, 1, FLOAT32) //feedback filter coefficients
    $this._f = new_filter() 

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2

        $this.signal = $sig
    }

    $this.init = {
        $this = $1

        $omega = 2 * M_PI * $this.Freq / get_audio_sample_rate(1)
        $tsin = sin($omega)
        $tcos = cos($omega)
        $alpha = $this._alpha

        if filter_type == 0 {
            // lp
            $b0 = (1 - $tcos)/ 2
            $b1 = 1 - $tcos
            $b2 = (1 - $tcos)/ 2
            $a0 = 1 + $alpha
            $a1 = -2 * $tcos
            $a2 = 1 - $alpha
        }

        if filter_type == 1 {
            // hp
            $b0 = (1 + $tcos)/ 2
            $b1 = -(1 + $tcos)
            $b2 = (1 + $tcos)/ 2
            $a0 = 1 + $alpha
            $a1 = -2 * $tcos
            $a2 = 1 - $alpha
        }

        if filter_type == 2 {
            // bp
            $b0 = $alpha
            $b1 = 0
            $b2 = -$alpha
            $a0 = 1 + $alpha
            $a1 = -2 * $tcos
            $a2 = 1 - $alpha
        }

        if filter_type == 3 {
            // notch
            $b0 = 1
            $b1 = -2 * $tcos
            $b2 = 1
            $a0 = 1 + $alpha
            $a1 = -2 * $tcos
            $a2 = 1 - $alpha
        }

        if filter_type == 4 {
            // ap
            $b0 = 1 - $alpha
            $b1 = -2 * $tcos
            $b2 = 1 + $alpha
            $a0 = 1 + $alpha
            $a1 = -2 * $tcos
            $a2 = 1 - $alpha
        }

        $this._a[0] = $b0 / $a0
        $this._a[1] = $b1 / $a0
        $this._a[2] = $b2 / $a0
        $this._b[0] = -$a1 / $a0
        $this._b[1] = -$a2 / $a0

        init_filter($this._f, $this._a, $this._b)

        ret ($this)
    }

    $this.gen = { // $this, $frames, $in_channels
        $this = $1
        $frames = $2
        $in_channels = $3

        if $this.Buf == 0 {
            $this.Buf = new($frames, 1, FLOAT32)
        }

        $this.signal.gen($this.signal, $frames, $in_channels)
        apply_filter($this._f, $this.Buf, $this.signal.Buf, 0, 0, $frames)
    }

    ret ($this)
}
