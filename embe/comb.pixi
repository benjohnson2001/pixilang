fn comb($freq, $fbk) {
    $this = new()

    $this.Freq = $freq
    $this.Fbk = $fbk
    $this.Mutex = mutex_create()
    
    $srate = get_audio_sample_rate(1)
    $this._dly_line = new($srate / 2, 1, FLOAT32)

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2

        $this.signal = $sig
    }

    $this.gen = { // $this, $channels, $frames, $in_channels
        $this = $1
        $channels = $2
        $frames = $3
        $in_channels = $4

        mutex_lock($this.Mutex)        

        $ch = new()
        $ch[0] = new($frames, 1, FLOAT32)
        $this.signal.gen($this.signal, $ch, $frames, $in_channels)

        $srate = get_audio_sample_rate(1)

        $dly = $srate / $this.Freq
        if $dly > $frames {
            $dly = $frames
        }
        $dly0 = floor($dly)

        $i = 0 while ($i < $frames) {
            $dly_val = $this._dly_line[$i + $frames - $dly0]
            $dly_val1 = $this._dly_line[$i + 1 + $frames - $dly0]
            $ch[0][$i] + ($dly_val + ($dly_val1 - $dly_val) * ($dly - $dly0)) * $this.Fbk
            $this._dly_line[$i + $frames] = $ch[0][$i]
            $i + 1
        }
        copy($this._dly_line, $this._dly_line, 0, $frames)

        copy($channels[0], $ch[0])

        if $this.Buf == 0 {
            $this.Buf = new($frames, 1, FLOAT32)
        }
        copy($this.Buf, $channels[0])

        remove($ch[0])
        remove($ch)
        mutex_unlock($this.Mutex)        
    }

    ret ($this)
}
