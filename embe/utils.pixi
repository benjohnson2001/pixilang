fn _($el, $list) {
    $l = new()
    $l.Tail = $list
    $l.Head = $el
    ret ($l)
}

/* TODO:
    - name nodes for access
*/

fn in($channel_id) {
    $this = new()
    $this.channel_id = $channel_id

    $this.gen = { // $this, $channels, $frames, $in_channels
        $this = $1
        $channels = $2
        $frames = $3
        $in_channels = $4

        if ($in_channels >= 0) {
            copy($channels[0], $in_channels[$this.channel_id])
            ret (1)
        } else {
            ret (0)
        }
    }

    ret ($this)
}

fn mix() {
    $this = new()
    $this.signals = -1
    $this.counter = 0

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this.counter + 1
        $this.signals = _($sig, $this.signals)
    }

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3
        $in_channels = $4

        clean($channels[0], 0)

        $ch = new()
        $ch[0] = new($frames, 1, FLOAT32)

        $signals = $this.signals
        $i = 0 while $i < $this.counter {
            $i + 1
            $sig = $signals.Head
            $signals = $signals.Tail

            $sig.gen($sig, $ch, $frames, $in_channels)
            op_cc(OP_ADD, $channels[0], $ch[0], $frames)
        }

        remove($ch[0])
        remove($ch)
    }

    ret ($this)
}

fn vis_waveform() {
    $this = new()

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this.signal = $sig
    }

    $this.render = { // $this
        $this = $1

        clear()
        $frames = get_xsize($this.signal.Buf)
        $x = 0 while ($x < $frames) {
            dot($x - $frames / 2, 400 * $this.signal.Buf[$x], 0xFFE0E0)
            $x + 1
        }
        frame()
    }

    ret ($this)
}

fn vis_fft() {
    $this = new()

    fft_size = 1024
    fft_size2 = fft_size div 2
    im = new(fft_size, 1, FLOAT32)
    re = new(fft_size, 1, FLOAT32)

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this.signal = $sig
    }

    $this.render = { // $this
        $this = $1

        clean(im)
        copy(re, $this.signal.Buf)
        fft(0, im, re)

        scr = get_screen()
        xsize = get_xsize(scr)
        ysize = get_ysize(scr)
        hxsize = xsize div 2
        hysize = ysize div 2

        clear()
        $max_amp = 0
        $max_amp_i = 0
        $i = 0 while ($i < fft_size2) {
            $x = ($i / fft_size2) * xsize - hxsize
            $amp = 16 * sqrt(re[$i] * re[$i] + im[$i] * im[$i]) / fft_size2
            if ($amp > $max_amp) {
                $max_amp = $amp
                $max_amp_i = $i
            }
            $y = -$amp * hysize
            line($x, 0, $x, $y, #FFFFFF)
            $i + 1
        }
        frame()
    }

    ret ($this)
}

fn vis_tartan() {
    $this = new()

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this.signal = $sig
    }

    $this.render = { // $this
        $this = $1

        $frames = get_xsize($this.signal.Buf)

        clear()
        $sx = 64
        $sy = 16

        $y = -$sy while $y < $sy {
            $x = -$sx while $x < $sx {

                $s = $this.signal.Buf[($y + $sy + ($x + $sx) * $sy) % $frames]

                $c = 255

                $clr = get_color($c, $c, $c)

                if $s >= 0.25 {
                    box(8 * $x + 0, 1 * $y, 2, 0, RED)
                } else {
                    box(8 * $x + 2, 1 * $y, 2, 0, BLUE)
                }

                $x + 1
            }

            $y + 1
        }
        frame()
    }

    ret ($this)
}


fn j($proc, $sig) {
    $proc.join($proc, $sig)
}

fn lfo1($obj, $prop) {
    $ms = get_timer(0) / 1000

    $val = abs(-1 + ($ms % 60) / 30) * 4000 + 4000

    mutex_lock($obj.Mutex)        
    set_prop($obj, $prop, $val)
    mutex_unlock($obj.Mutex)        
}
