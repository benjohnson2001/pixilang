fn osc_imp($amp) {

    $this = new()
    $this.Amp = $amp
    $this.is_gen = 1

    $this.gen = { // $this, $frames
        $this = $1
        $frames = $2

        $sig = new($frames, 1, FLOAT32)
        clean($sig, 0)
        envelope2p($sig, 0, 0, 0, 32, $this.Amp, -$this.Amp)
        $this.Amp = 0

        ret ($sig)
    }

    ret ($this)
}

fn osc_noise($amp) {

    $this = new()
    $this.Amp = $amp
    $this.is_gen = 1

    $this.gen = { // $this, $frames
        $this = $1
        $frames = $2

        $sig = new($frames, 1, FLOAT32)
        generator(OP_RAND, $sig, 0, $this.Amp)

        ret ($sig)
    }

    ret ($this)
}

fn osc_sin($freq, $amp) {

    $this = new()

    $this.Phase = 0
    $this.Freq = $freq
    $this.Amp = $amp
    $this.is_gen = 1

    $this.gen = { // $this, $frames
        $this = $1
        $frames = $2

        $sig = new($frames, 1, FLOAT32)

        $srate = get_audio_sample_rate(1)
        $p = 2 * M_PI * $this.Phase / $srate
        $d = 2 * M_PI * $this.Freq / $srate

        generator(OP_SIN, $sig, $p, $this.Amp, $d, 0)

        $this.Phase + $this.Freq * $frames

        if $this.Phase > $srate {
            $this.Phase % $srate
        }

        ret ($sig)
    }

    ret ($this)
}

fn osc_sqr($freq, $amp) {

    $this = new()

    $this.Phase = 0
    $this.Freq = $freq
    $this.Amp = $amp
    $this.is_gen = 1

    $this.gen = { // $this, $frames
        $this = $1
        $frames = $2

        $sig = new($frames, 1, FLOAT32)

        $srate = get_audio_sample_rate(1)
        $p = 2 * M_PI * $this.Phase / $srate
        $d = 2 * M_PI * $this.Freq / $srate

        generator(OP_SIN, $sig, $p, 1, $d, 0)
        op_cn(OP_GREATER, $sig, 0)
        op_cn(OP_MUL, $sig, 2 * $this.Amp)
        op_cn(OP_ADD, $sig, -$this.Amp)

        $this.Phase + $this.Freq * $frames

        if $this.Phase > $srate {
            $this.Phase % $srate
        }

        ret ($sig)
    }
    ret ($this)
}
