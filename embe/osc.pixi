fn osc_sin($freq, $amp) {

    $this = new()

    $this.Phase = 0
    $this.Freq = $freq
    $this.Amp = $amp

    $this.gen = { // $this, $frames
        $this = $1
        $frames = $2

        if $this.Buf == 0 {
            $this.Buf = new($frames, 1, FLOAT32)
        }

        $srate = get_audio_sample_rate(1)
        $p = 2 * M_PI * $this.Phase / $srate
        $d = 2 * M_PI * $this.Freq / $srate

        generator(OP_SIN, $this.Buf, $p, $this.Amp, $d, 0)

        $this.Phase + $this.Freq * $frames

        if $this.Phase > $srate {
            $this.Phase % $srate
        }
    }

    ret ($this)
}

fn osc_sqr($freq, $amp) {

    $this = new()

    $this.Phase = 0
    $this.Freq = $freq
    $this.Amp = $amp

    $this.gen = { // $this, $frames
        $this = $1
        $frames = $2

        if $this.Buf == 0 {
            $this.Buf = new($frames, 1, FLOAT32)
        }

        $srate = get_audio_sample_rate(1)
        $p = 2 * M_PI * $this.Phase / $srate
        $d = 2 * M_PI * $this.Freq / $srate

        generator(OP_SIN, $this.Buf, $p, 1, $d, 0)
        op_cn(OP_GREATER, $this.Buf, 0)
        op_cn(OP_MUL, $this.Buf, 2 * $this.Amp)
        op_cn(OP_ADD, $this.Buf, -$this.Amp)

        $this.Phase + $this.Freq * $frames

        if $this.Phase > $srate {
            $this.Phase % $srate
        }
    }
    ret ($this)
}

fn osc_noise($amp) {

    $this = new()
    $this.Amp = $amp

    $this.gen = { // $this, $frames
        $this = $1
        $frames = $2
        
        if $this.Buf == 0 {
            $this.Buf = new($frames, 1, FLOAT32)
        }

        generator(OP_RAND, $this.Buf, 0, $this.Amp)
    }

    ret ($this)
}
